{"note":"Don't delete this file! It's used internally to help with page regeneration.","body":"*PyCalCal* is a Python library that makes it easy to:\r\n\r\n*   convert dates from/to **31** different calendars\r\n*   calculate special dates/times such as holidays, astronomical events (equinoxes,\r\n    solstices ...), sunrise/sunset\r\n\r\nYou can also try it out [online][PyCalCalOnline] (_experimental !!_)\r\n\r\n\r\n# How to run PyCalCal #\r\nIn order to use the pycalcal you need:\r\n\r\n   * a Python version equal to or greater than 2.5 and less than 3.0.\r\n   * [mpmath](http://code.google.com/p/mpmath/)\r\n\r\nThen it is enough to place `pycalcal.py` file in any place where python can load it, i.e. your current working directory.\r\n\r\n## Getting started ##\r\nThe first thing to do is to load pycalcal. From your python prompt type (omit >>> of course...)\r\n```python\r\n   >>> import pycalcal as pcc\r\n```\r\n\r\nYou are now ready to play with calendars, i.e. converting dates from gregorian to coptic:\r\n```python\r\n>>> fix = pcc.fixed_from_gregorian(pcc.gregorian_date(2006, 2, 5))\r\n>>> pcc.coptic_from_fixed(fix)\r\n[1722, 5, 28]\r\n```\r\n\r\nor finding out when next year's Easter will be\r\n\r\n```python\r\n>>> pcc.gregorian_from_fixed(pcc.easter(2010))\r\n[20010, 4, 4]\r\n```\r\n\r\nor Hindu's New Year for 2009:\r\n```python\r\n>>> pcc.gregorian_from_fixed(pcc.diwali(2009)[0])\r\n[2009, 10, 19]\r\n```\r\nEnjoy!!!\r\n\r\n# How to build PyCalCal #\r\nPyCalCal is generated following the literate programming paradigm.\r\nIn order generate source code and documentation you need the following tools:\r\n   * [noweb](http://www.cs.tufts.edu/~nr/noweb/)\r\n     Installing noweb has never been a problem on all platforms/operating\r\n     systems I tried: MS Windows XP (with cygwin), HP-UX, Mac OS X Snow\r\n     Leopard. \r\n   * make\r\n   * sh (unix shell)\r\n   * LaTeX distribution, i.e. TeXLive2010 (with asymptote!)\r\n\r\nUnit tests' line coverage metrics are gathered by [coverage](http://nedbatchelder.com/code/coverage/)\r\n\r\nHere are the steps for buiding:\r\n\r\n1. execute *makemake.sh* in order to create the Makefile\r\n>   $ ./makemake.sh\r\n\r\n2. generate the code:\r\n>   $ make pycalca.py\r\n\r\n3. generate the doc:\r\n>   $ make figures\r\n>   $ make pycalcal.pdf\r\n\r\n4. run the tests:\r\n>   $ make test\r\n\r\n\r\n### Details ###\r\n*PyCalCal* is an implementation in Python of _CALENDRICA 3.0_, which is the\r\n Common Lisp implementation of the functions described in the [book][CalCalBook]\r\n\r\n    Nachum Dershowitz, Edward M. Reingold \"Calendrical Calculations\"\r\n    Cambridge University Press; 3rd edition (December 10, 2007)\r\n    Paperback; ISBN-13: 9780521702386\r\n    E. M. Reingold and N. Dershowitz,\r\n    3rd ed., Cambridge University Press, 2008.\r\n\r\nSome of the algorithms are from:\r\n\r\n    Jean Meeus \"Astronomical Algorithms\"\r\n    Willmann-Bell, Inc.\r\n    2nd edition (1998 with corrections as of June 15, 2005);\r\n    ISBN: 0-943396-61-1\r\n\r\n\r\n### STATUS ###\r\nI, Enrico Spinielli, implemented PyCalCal for fun and to further assaporate the beauty of the\r\nwork of the authors of the book.\r\nHaving said so, PyCalCal code is pretty well tested and usable.\r\n\r\nSee '_STATUS_' file for further details.\r\n\r\n### Acknowledgements ###\r\nI want to thank:\r\n\r\n* Prof.s Reingold and Dershowitz for their prompt replies to my (sometimes\r\n  silly, other times pertinent) questions\r\n* my family, Gilda and the kids, for the good they bring to my life (and the\r\n  time they let me spend with all this)\r\n* my parents and parents-in-law for their past and continuous support\r\n\r\n### Notes ###\r\n_CALENDRICAL 3.0_ is written and copyrighted by E. M. Reingold and\r\nN. Dershowitz as described in file 'COPYRIGHT\\_DERSHOWITZ_REINGOLD'\r\n\r\n### Resources ###\r\nProf. Reingold mantains a [companion site for the book][BookCompanionSite].\r\n\r\nThe [resource page of the book][BookResPage] at Cambridge University Press\r\nprovides a link to a zipped version of 'calendrica-3.0.cl' which I included\r\nunzipped in PyCalCal project repo in order to be able to reference the relevant\r\nsnippets of the original implementation.\r\n\r\nFiles '_dates[1-5].tex_', containing test data, have been kindly provided to me\r\nby Prof. Reingold.\r\n\r\n\r\n[CalCalBook]: http://www.cup.cam.ac.uk/catalogue/catalogue.asp?isbn=9780521702386 \"Calendrical Calculations\"\r\n[BookResPage]: http://www.cup.cam.ac.uk/catalogue/catalogue.asp?isbn=9780521702386&ss=res \"Calendrical Calculations's resurce page at Cambridge University Press\"\r\n[C3Zip]: http://www.cup.cam.ac.uk/resources/0521702380/5106_calendrica-3.0.cl.zip \"Zip file of Calendrica 3.0 source at Cambridge University Press\"\r\n[PyCalCalOnline]: http://calendrica.appspot.com \"PyCalCal online appl\"\r\n[BookCompanionSite]: http://emr.cs.iit.edu/home/reingold/calendar-book/third-edition/index.html \"Calendrical Calculations' book companion site\"","name":"Pycalcal","tagline":"Calendrical Calculations in Python","google":""}